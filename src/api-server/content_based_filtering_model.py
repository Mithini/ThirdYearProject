# -*- coding: utf-8 -*-
"""Content-Based Filtering Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F6nvqkvB-KIodVZIimiC9Db9XS6gr01n

# Setup
"""

import pandas as pd
from ast import literal_eval

from model.components.featureExtractors.feature_extractor_distilbert import FeatureExtractor
from model.components.preprocessors.data_preprocessor_v2 import DataPreprocessor

# Set the float format
pd.options.display.float_format = '{:.2f}'.format

# Import data from the goodbooks-10k repo
books_df = pd.read_csv('https://raw.githubusercontent.com/malcolmosh/goodbooks-10k/master/books_enriched.csv',
                       index_col=[0], converters={"genres": literal_eval})
books_ratings = pd.read_csv('https://raw.githubusercontent.com/malcolmosh/goodbooks-10k/master/ratings.csv')

# Display three entries
books_df.head(3).T

"""## Analysis"""

# See what genres are numbers
non_list_entries = books_df[~books_df['genres'].apply(lambda x: isinstance(x, list))]
print(non_list_entries[['title', 'genres']])

print(books_df['title'].sample(10))

"""# Preprocessing

We're going to keep the following columns.


1.   authors
2.   average_rating
3.   genres
4.   language_code
5.   title
6.   description
"""

preprocessor = DataPreprocessor()
books_df_processed = preprocessor.preprocess(books_df)

"""# Feature Extraction"""

featureExtractor = FeatureExtractor()
composite_feature_vector = featureExtractor.extract_features(books_df_processed)

"""# Similarity Measure

### Cosine Similarity
"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(composite_feature_vector)

"""### Euclidean Distance

### Manhattan Distance

### Jaccard Similarity

# Test
"""

indices = pd.Series(books_df_processed.index, index=books_df_processed['title']).drop_duplicates()

def recommend_items(title, cosine_sim=cosine_sim):
    # Convert input title to lowercase
    title = title.lower()

    # Get the index of the item that matches the title
    idx = indices[title]

    # Get the pairwise similarity scores of all items with that item
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the items based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar items
    sim_scores = sim_scores[1:11]

    # Get the item indices
    item_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar items
    return books_df_processed['title'].iloc[item_indices]


print(recommend_items('Festive in Death (In Death, #39)'))
